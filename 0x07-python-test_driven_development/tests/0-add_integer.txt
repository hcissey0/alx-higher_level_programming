Test cases for '0-add_integer' module
=============================
testing the 'add_integer' function

Importing the function:
	>>> add_integer = __import__("0-add_integer").add_integer

Check for module docstring:
	>>> docstring = __import__("0-add_integer").__doc__
	>>> len(docstring) > 1
	True

Check for function docstring:
	>>> docstring = __import__("0-add_integer").add_integer.__doc__
	>>> len(docstring) > 1
	True

Testing normal integers:
	>>> add_integer(2, 3)
	5

Testing negative numbers:
	>>> add_integer(-1, 5)
	4
	>>> add_integer(-2, -3)
	-5
	>>> add_integer(2, -1)
	1

Testing empty input:
	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'
	
	>>> add_integer(1)
	99

Testing floats:
	>>> add_integer(0.3, 2.5)
	2
	>>> add_integer(2.5, 2.5)
	4
	>>> add_integer(1.5, 2)
	3
	>>> add_integer(2, 5.5)
	7

Testing other types:
	>>> add_integer(True, 3)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	
	>>> add_integer(5, "5")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
	
	>>> add_integer([1, 3], 4)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Testing very large numbers:
	>>> add_integer(1, float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

	>>> add_integer(float('inf'), 3)
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

Testing large numbers:
	>>> add_integer(999999999999999999999999999999999999999999999999, 6)
	1000000000000000000000000000000000000000000000005

Testing dictionary:
	>>> add_integer(34, {'1': 1})
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Testing more than two arguments:
	>>> add_integer(1, 2, 4)
	Traceback (most recent call last):
	...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
